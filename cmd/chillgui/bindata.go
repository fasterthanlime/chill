// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/icon.ico (16.958kB)
// data/icon.xcf (1.195kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x09\x54\x93\x67\xba\xfe\x41\x2b\xda\x65\x98\xdb\x4e\x67\x3a\x3d\xad\x74\xa6\xf7\x76\xe6\xcc\x4c\x3b\xf7\x9e\x33\x77\x66\x3a\x56\x12\xb6\x10\x96\x80\x04\x11\xad\x44\x10\xbc\x6a\x0f\x58\x11\x12\x90\x20\x24\x10\xa8\x6c\x89\x49\x20\x6b\x29\x04\x04\x59\x65\xab\x58\x11\xc7\x82\x58\x57\x64\xa4\x20\xa2\xb5\xad\xa5\x3a\xd4\x56\x1d\x44\x65\x27\xb9\xe7\xf9\x9b\x8f\x89\x29\x90\x68\xdb\xe9\x3d\xe7\xfa\x9f\xf3\x9e\x1f\xf3\x7f\xef\xfb\x3e\xcf\xb7\xbc\xdf\xfb\x2d\x52\x94\x03\xe5\x40\x31\x99\x78\xbf\x40\xfd\xda\x9d\xa2\x7e\x4a\x51\xd4\xaf\x29\x8a\x62\x52\x14\x25\xa6\xbe\xfe\xfd\xe1\xf3\xf0\x79\xf8\x3c\x7c\x6c\x3d\x26\x93\xe9\x81\xe5\xf6\xed\xdb\xd4\x8a\x15\x2b\x28\x06\x83\xe1\xc0\x66\xb3\x1f\xf1\xf6\xf6\x5e\xec\xe5\xe5\xf5\x68\x4c\x4c\xcc\xd2\xf4\xf4\x74\xff\xf4\xf4\xf4\x95\x19\x19\x19\xf3\x0a\xca\xa0\x2c\x74\xa0\x0b\x1b\xb0\x05\x9b\xb0\x0d\x1f\xdf\x06\xe3\x77\xcd\x7f\x72\x72\x92\xea\xee\xee\xa6\x56\xae\x5c\x49\xb9\xba\xba\x3a\xf8\xfa\xfa\x2e\x0a\x0a\x0a\x7a\x2a\x23\x23\xc3\x33\x27\x27\x27\x2a\x37\x37\x77\x63\x6e\x6e\x6e\xae\xc1\x60\xb8\xd2\xdc\xdc\x7c\xf3\xe0\xc1\x83\xf3\x0a\xca\xa0\x6c\xee\xd7\xcf\x46\xd8\x80\x2d\xd8\x84\x6d\xf8\x80\x2f\xf8\x84\xef\x1f\x92\x7f\x5f\x5f\x1f\x15\x12\x12\x42\x31\x99\x4c\x87\x80\x80\x80\x47\x82\x82\x82\x7e\x22\x16\x8b\xdd\x73\x72\x72\xd2\xd5\x6a\xf5\xe9\xa6\xa6\xa6\xbb\xed\xed\xed\x23\xed\xed\xed\x63\x7f\xfb\xdb\xdf\x8c\xd7\xaf\x5f\x37\x0d\x0f\x0f\xcf\x2b\x28\x83\xb2\xd0\x81\x2e\x6c\xc0\x16\x6c\xc2\x36\x7c\xc0\x17\x7c\xc2\x37\x30\xfc\x10\xfc\x4f\x9c\x38\x41\x79\x7a\x7a\x52\x81\x81\x81\x0b\xd7\xad\x5b\xf7\xf4\xf6\xed\xdb\x97\xc9\x64\x32\x69\x41\x41\x41\x47\x7d\x7d\xfd\xf8\x89\x13\x27\xa6\xaf\x5e\xbd\x6a\xba\x73\xe7\x8e\x69\x64\x64\xc4\x34\x36\x36\x66\x9a\x9e\x9e\x36\xd9\x7a\x50\x06\x65\xa1\x03\x5d\xd8\x80\x2d\xd8\x84\x6d\xf8\x80\x2f\xf8\x84\x6f\x60\x00\x96\x7f\x25\x7f\xf4\x3d\xf8\xf5\xf3\xf3\x5b\x14\x1b\x1b\xfb\xb2\x5c\x2e\x57\xa8\x54\xaa\x23\x35\x35\x35\x63\x9d\x9d\x9d\xc6\xcf\x3f\xff\x9c\xc6\x3f\x35\x35\x75\x0f\x37\xa3\xd1\x68\x97\x58\x3e\xb0\x01\x5b\xb0\x09\xdb\xf0\x01\x5f\xf0\x09\xdf\xc0\xe0\xe1\xe1\x41\x25\x27\x27\x53\xd3\xd3\xd3\xdf\x3b\xff\xf8\xf8\x78\xca\xdd\xdd\x9d\xf2\xf1\xf1\x59\xb4\x65\xcb\x96\xdf\xe7\xe5\xe5\x95\xee\xde\xbd\xfb\xf6\x99\x33\x67\x4c\xb3\xf1\x06\x1f\xd2\xa6\x43\x43\x43\xa6\x9b\x37\x6f\xce\x2b\x28\x43\xfa\x8a\x65\x5d\x58\xd6\x03\x7c\xc1\x27\x7c\x03\x03\x9b\xcd\x46\x9c\x75\xf4\xf1\xf1\xa1\x8c\x46\xe3\xf7\xc6\xdf\xdb\xdb\x9b\x5a\xb6\x6c\x99\xa3\xbb\xbb\xfb\x92\x37\xdf\x7c\x73\x86\xfb\xb9\x73\xe7\x4c\x77\xef\xde\xfd\x06\xef\xf1\xf1\x71\x9a\xd3\xe0\xe0\xa0\xa9\xa7\xa7\xc7\x84\xb1\xdc\xd0\xd0\x70\xb5\xa9\xa9\x69\x60\x36\x31\x7f\xbb\x8b\xb2\xd0\x81\x2e\x6c\x58\xd7\x03\x7c\xc1\xa7\xb9\x0e\xca\x12\x13\x13\x59\x7c\x3e\x7f\xa9\x9b\x9b\xdb\x42\x16\x8b\xf5\xbd\xf0\x07\x77\x26\x93\xb9\x70\xfd\xfa\xf5\x4b\xe3\xe2\xe2\x02\x72\x73\x73\x77\x97\x95\x95\xdd\x21\xdc\x09\x46\xb4\x1b\x30\x7f\xf5\xd5\x57\xa6\xfe\xfe\x7e\xd3\xbb\xef\xbe\x3b\xb1\x67\xcf\x9e\x4b\x25\x25\x25\x3d\x0a\x85\xa2\x48\x28\x14\xfa\x88\x44\xa2\xe5\xb3\x09\xbe\xa1\x0c\xca\x42\x07\xba\xb0\x01\x5b\xb0\x49\xe2\x07\x7c\xc1\x67\x5f\x5f\x9f\xa9\xae\xae\xee\x6e\x71\x71\xf1\x40\x5e\x5e\x9e\x2c\x26\x26\xe6\x25\x06\x83\xb1\x90\xcd\x66\x7f\xa7\xfc\xd1\xe7\xd1\xee\xe0\x9e\x94\x94\x94\xa6\xd3\xe9\x2e\xed\xdb\xb7\x6f\xf4\xfc\xf9\xf3\x33\xdc\x09\x6f\xc4\xef\xbe\xbe\x3e\x63\x53\x53\xd3\xb0\x56\xab\xfd\xb0\xa0\xa0\xa0\x5e\x28\x14\x72\xf8\x7c\xfe\x2b\xf1\xf1\xf1\xcf\xfb\xfa\xfa\x3a\x79\x79\x79\x2d\x9c\x4d\xf0\x0d\x65\x50\x16\x3a\xd0\x85\x0d\xd8\x82\x4d\xd8\x26\xf5\x00\x9f\x18\x27\xa8\x1b\x8c\x07\x83\xc1\x30\x94\x93\x93\x23\x13\x08\x04\xbf\xc0\x58\x00\xe6\xef\x82\x3f\x62\x1d\xc6\x3b\xfa\x3c\xda\x1d\xdc\x3b\x3b\x3b\xa7\x2d\xfb\x26\xfa\x24\xfe\x8d\x7e\x7b\xf0\xe0\xc1\x69\x9d\x4e\xd7\x2f\x14\x0a\x55\x61\x61\x61\xbe\x9b\x36\x6d\x7a\x61\xcd\x9a\x35\x4b\x3c\x3d\x3d\x31\x3e\x1d\x3c\x3d\x3d\x1d\xdc\xdd\xdd\xbf\x21\xf8\x1d\x7d\xcc\x5c\xc6\x11\x3a\xd0\x85\x0d\xd8\x82\x4d\xd8\x86\x0f\xf8\x22\x63\x0d\x75\x71\xfb\xf6\x6d\xba\x0e\x4a\x4a\x4a\xae\x89\x44\xa2\x60\x16\x8b\xb5\x04\x98\x81\xfd\xdb\xf0\xef\xea\xea\xa2\xe3\x3c\x62\x1d\xc6\x3b\xfa\x3c\xda\x1d\xfe\x49\x5f\xc4\xfb\xc6\x8d\x1b\xa6\xf6\xf6\x76\xa3\x5e\xaf\xbf\x2c\x93\xc9\xde\xd9\xb9\x73\x67\x58\x60\x60\xe0\xf3\x0c\x06\x63\x89\x9b\x9b\x9b\xa3\xb7\xb7\xb7\x03\xde\x3c\x1e\xef\xb1\xc8\xc8\xc8\x9f\xad\x5f\xbf\xfe\xe7\xb3\xc8\x33\xe1\xe1\xe1\x4f\xb8\xbb\xbb\x2f\x30\xd7\x05\xad\x03\x1b\xb0\x05\x9b\xb0\x0d\x1f\xf0\x05\x9f\x96\xe3\x01\x98\x80\x2d\x2f\x2f\x6f\x37\xb0\x02\x33\xb0\x83\xc3\x83\xf0\x1f\x19\x19\xa1\x02\x02\x02\x30\xbf\x3f\xb2\x75\xeb\xd6\x57\x10\xeb\x30\xde\xd1\xe7\xd1\xee\xd6\xdc\xb5\x5a\xed\x67\x12\x89\x24\x6e\xed\xda\xb5\x4b\x83\x83\x83\x1f\x65\x30\x18\x8e\x1e\x1e\x1e\x74\x3b\x6e\xd9\xb2\xe5\xb9\x8d\x1b\x37\xfe\xea\xad\xb7\xde\x8a\x50\xab\xd5\x7b\x0a\x0b\x0b\xab\x8b\x8a\x8a\x66\xe4\x9d\x77\xde\xa9\xd6\x68\x34\x95\x39\x39\x39\x5b\x36\x6d\xda\xf4\x9b\xe8\xe8\xe8\x5f\x42\x07\xba\xb0\x01\x5b\xb0\x09\xdb\xf0\x01\x5f\xd6\x75\x00\x4c\xc0\x06\x8c\xc0\x0a\xcc\xc0\x0e\x0e\xe0\x72\xbf\xfc\x8b\x8a\x8a\xd0\xe7\x1d\x36\x6f\xde\xfc\xac\x42\xa1\xd0\x21\xd6\xf6\xf6\xf6\xde\x33\xde\xe1\xbf\xad\xad\xcd\xa8\xd3\xe9\x06\x24\x12\x49\x6c\x78\x78\xf8\x33\xc0\x8a\x5c\x3d\x38\x38\xd8\x29\x2e\x2e\xee\xc5\xa4\xa4\x24\x8e\x4a\xa5\xaa\x2b\x2a\x2a\x3a\x62\x30\x18\x3e\x3e\x74\xe8\xd0\x34\x62\xda\xa5\x4b\x97\x66\xe4\xc2\x85\x0b\x74\x1d\x96\x96\x96\x7e\x5e\x5a\x5a\xda\x61\x30\x18\xda\xa0\x03\x5d\xd8\x80\x2d\xd8\x84\x6d\xf8\x80\x2f\xf8\x84\x6f\x52\x07\x24\x26\x02\x23\xb0\x02\x33\xb0\x83\xc3\xdb\x6f\xbf\x7d\x5f\xfc\xc7\xc7\xc7\xd1\xee\x14\x97\xcb\x5d\x24\x10\x08\x18\x3a\x9d\xee\xcc\xd9\xb3\x67\xef\xe1\x8e\xfe\x06\xcc\xc0\x91\x9e\x9e\xbe\x35\x32\x32\x72\x86\xbb\xbf\xbf\xff\x62\x3e\x9f\xff\xaa\x52\xa9\xac\x29\x2e\x2e\xbe\xd4\xd4\xd4\x44\xc7\x71\xcc\xdd\xd0\x9b\x98\x98\xa0\xc7\x2f\x11\xfc\x1b\xf3\xfe\x95\x2b\x57\x4c\x03\x03\x03\xf4\xbc\x01\x1d\xe8\xc2\x06\x6c\xc1\x26\xa9\x03\xf8\x82\x4f\xf8\x06\x06\x32\x1e\x49\x1d\x00\x2b\x30\xc7\xc5\xc5\x31\xfd\xfc\xfc\x16\xbb\xb9\xb9\x51\x03\x03\x03\x76\xf3\x3f\x7e\xfc\x38\xbd\x86\xe3\xf1\x78\xcf\x28\x14\x8a\xb7\x6b\x6b\x6b\x47\xff\xfe\xf7\xbf\xcf\xf4\x35\xc4\xdd\xae\xae\x2e\x8c\x77\xf4\xf9\x58\x4b\xee\x58\xaf\xf1\xf9\xfc\xbf\xc8\x64\xb2\x86\xca\xca\x4a\x7a\x8e\xb0\x8e\xdb\xb3\x3d\xa4\x5e\x2d\xe7\x11\xe8\xc2\x06\x6c\xc1\x26\x6c\x33\x18\x0c\x8a\xd4\x01\x7c\x03\x03\xb0\x00\x13\x19\x93\xc8\x1d\x80\x19\x7a\x89\x89\x89\x7f\xc4\x38\x90\x48\x24\x76\xf1\x47\xfe\x84\x31\x13\x14\x14\xe4\x94\x9a\x9a\xea\xa5\x56\xab\x4f\x76\x77\x77\x9b\x46\x47\x47\x67\x62\xfd\x17\x5f\x7c\x61\x7a\xef\xbd\xf7\x26\x31\xdf\xf0\x78\xbc\xe7\x5c\x5d\x5d\xc1\x1d\xe3\x65\xb1\x40\x20\xf8\x8b\x54\x2a\xad\xaf\xaa\xaa\x1a\xbb\x78\xf1\xe2\x8c\x9e\x25\x4f\xd2\xe6\x96\x82\xdf\xac\xcb\x41\x17\x36\x60\x4b\x26\x93\xd5\xa7\xa4\xa4\xfc\xb7\xaf\xaf\xef\x42\xf3\x5a\xd3\x31\x2c\x2c\xec\xb9\x8c\x8c\x8c\x9c\xe6\xe6\xe6\x11\x60\x22\x36\x50\x17\x66\xbd\x91\x5d\xbb\x76\xed\x5c\xb5\x6a\x95\x33\x87\xc3\xa1\xb9\xd9\x7a\x26\x26\x26\x28\xf3\xf8\xfd\xa9\x4c\x26\x53\x36\x34\x34\x4c\x90\xb6\x87\xa0\x5d\x0e\x1d\x3a\x64\x54\xab\xd5\xe7\x76\xee\xdc\x19\xe2\xeb\xeb\x8b\xdc\x13\xf9\xc1\x82\x80\x80\x80\xdf\x8a\x44\x22\x03\xe1\x0e\x1c\x96\xb9\x01\xfe\x8d\x35\xcd\x67\x9f\x7d\x86\xb9\xd2\xd8\xdb\xdb\x3b\x0d\xc1\xdf\xf8\x0d\xdf\x50\x8e\xcc\x6d\x84\x0b\xe2\x43\x75\x75\xf5\x88\x4c\x26\x13\x70\x38\x9c\xc7\x82\x82\x82\x28\xf8\x74\x75\x75\x5d\x1c\x17\x17\xc7\xd9\xb5\x6b\x57\x27\x30\x01\x9b\xe5\x38\xc0\x3c\xad\x54\x2a\xb5\xc1\xc1\xc1\xcf\x60\xdd\x0c\x6e\xb6\x9e\xc6\xc6\x46\xca\xdf\xdf\x7f\x51\x46\x46\x86\x9f\x5a\xad\x3e\x83\xbe\x45\xda\x10\xd8\x90\x73\xe9\x74\xba\x0b\x69\x69\x69\x1b\x42\x43\x43\x9f\x74\x73\x73\xa3\xd7\xe3\xe6\xb6\x5f\x5d\x52\x52\x32\x70\xe1\xc2\x05\xa3\x65\x7f\x41\x8e\x02\x3b\xa7\x4f\x9f\x9e\x3c\x76\xec\xd8\x44\x45\x45\xc5\x0d\x85\x42\xd1\xac\xd1\x68\x54\x10\x95\x4a\xd5\x52\x5b\x5b\x3b\xf2\xc1\x07\x1f\x4c\x02\x33\xfa\xef\xe4\xe4\xe4\x4c\x1d\xa0\x5e\x8e\x1d\x3b\x36\xa9\x50\x28\x92\xfd\xfc\xfc\x9e\xc0\xbc\xd6\xd2\xd2\x42\x2d\x5f\xbe\xdc\x61\xc5\x8a\x15\x4f\x8a\xc5\xe2\x0d\xc0\x04\x6c\x64\x6e\x42\x9f\xea\xed\xed\xc5\xbc\x74\x06\x5c\xc0\x09\xdc\x6c\x3d\xc8\x9f\xfd\xfc\xfc\x1e\xdf\xb5\x6b\x97\x70\xdf\xbe\x7d\x13\xc0\x42\xea\x14\xf5\xbb\x7f\xff\xfe\x29\xa5\x52\x59\x19\x16\x16\xb6\x14\xe3\x70\xc7\x8e\x1d\xc8\x0f\xa0\xb7\x24\x3b\x3b\x7b\x43\x4b\x4b\xcb\x5d\xcb\x76\x40\x5c\x3b\x7c\xf8\xf0\xb4\x46\xa3\xe9\x97\xc9\x64\xd9\x72\xb9\x3c\x39\x3d\x3d\x1d\xf3\xdc\x1f\xb8\x5c\xee\xd3\x90\xe4\xe4\xe4\x3f\xa3\x6d\xf3\xf2\xf2\x32\x55\x2a\x55\xe7\x7b\xef\xbd\x37\x05\x1b\x64\x3c\xa0\x0f\xa0\xee\xf2\xf3\xf3\x69\xfe\x58\xef\x61\x2c\xc3\x37\x30\x00\x0b\x30\x01\x1b\xd1\x23\x71\x00\x1c\xc0\x05\x9c\xc0\xcd\xd6\x83\xf9\x22\x22\x22\xe2\x59\xa9\x54\x2a\x3b\x71\xe2\xc4\x24\xd6\x5c\x24\xae\x20\x36\x1b\x0c\x86\xf3\x69\x69\x69\x2b\x5f\x7f\xfd\xf5\x25\xc8\xb3\x87\x87\x87\xa9\xa8\xa8\x28\x8a\xcd\x66\x3b\xe5\xe4\xe4\xac\x2d\x2d\x2d\xbd\x8e\x5c\x0c\x39\x19\xda\xe2\x93\x4f\x3e\x41\x5e\xf6\xb9\x48\x24\xda\x14\x12\x12\xf2\x0c\xf0\x7b\x79\x79\x3d\xe6\xea\xea\xba\x10\x7d\xd2\xbc\x67\xb4\x10\xfd\x3a\x30\x30\x10\x75\xb1\x5a\xaf\xd7\x9f\xeb\xef\xef\x37\x92\x75\xe0\xad\x5b\xb7\x4c\x47\x8e\x1c\x99\x44\xdd\x91\xf6\x07\x7f\xf8\x06\x06\x60\x01\x26\x60\x03\x46\x12\xa7\x81\x1d\x1c\xc0\x05\x9c\xc0\xcd\x16\x7f\x36\x9b\xbd\x28\x2b\x2b\x8b\x5b\x58\x58\xf8\xe9\xd9\xb3\x67\x8d\xa4\x3f\x01\x0b\xd6\x3a\x45\x45\x45\xed\x9b\x37\x6f\xfe\x0f\xe4\x66\x59\x59\x59\x33\xf3\xaa\x39\xe7\x7e\x31\x27\x27\x67\x97\xc1\x60\xf8\x47\x67\x67\xa7\xe9\xa3\x8f\x3e\xc2\xfa\x67\x4a\xad\x56\xb7\x6f\xdb\xb6\xed\xb7\x6e\x6e\x6e\x0b\x90\x97\x62\xfc\x5e\xbd\x7a\x95\x9a\x9a\x9a\xa2\x05\x7f\x23\xe6\xbe\xf6\xda\x6b\xc8\x97\x5c\x32\x32\x32\x0c\xd5\xd5\xd5\xc3\x1f\x7d\xf4\x91\xf1\xea\xd5\xab\x18\xc7\xa8\xc3\x9b\x52\xa9\x34\x86\xc3\xe1\x3c\xba\x7e\xfd\xfa\x19\xbf\xc0\x00\x2c\xc0\x04\x6c\xc0\x48\xe6\x02\x60\x07\x07\x70\x01\x27\x70\xb3\xc5\xdf\xdb\xdb\x7b\x49\x6e\x6e\x6e\xd4\x81\x03\x07\xee\x62\xdc\x5a\xf6\xfd\xfa\xfa\xfa\xd1\x82\x82\x82\xf2\x98\x98\x98\x67\x7d\x7d\x7d\x1d\x06\x07\x07\xef\x59\x1f\x62\xfd\x19\x1d\x1d\xfd\x92\x54\x2a\x95\x16\x17\x17\x77\x97\x95\x95\xf5\x68\x34\x9a\x36\xb1\x58\xbc\x22\x22\x22\x82\xee\x7f\xa7\x4f\x9f\x9e\x75\x5d\x02\x5b\xe8\xd7\x98\xe7\x37\x6f\xde\xec\x9a\x99\x99\xb9\xa7\xb4\xb4\xf4\x6c\x55\x55\x55\x0f\x6c\xc9\x64\x32\x69\x6c\x6c\xec\xbf\xb3\x58\xac\x05\x68\x77\x4b\x3d\x60\x01\x26\x60\x03\x46\xcb\x31\x00\x0e\xe0\x02\x4e\xe0\x66\xc7\xf8\x5f\x22\x95\x4a\x37\x1c\x39\x72\xe4\x2e\x62\x28\x89\x41\xd7\xae\x5d\xc3\x5c\x7c\x31\x21\x21\xc1\x0b\xf9\x18\xda\xcb\x12\x3f\xe6\x16\xd4\x01\x8b\xc5\x5a\xb8\x6d\xdb\xb6\x9f\x27\x24\x24\xfc\x4e\x20\x10\xbc\x92\x90\x90\xf0\x52\x44\x44\xc4\x63\x98\x53\xb6\x6f\xdf\x3e\xef\xda\x5c\xa3\xd1\xd0\x7b\x89\x1c\x0e\x67\x49\x54\x54\xd4\x2f\xe2\xe3\xe3\x5f\x4e\x48\x48\x80\x8d\xdf\xc1\x26\x6c\xa3\xbf\x5b\xef\x71\x00\x0b\x30\x01\x1b\x30\x02\x2b\x89\x1d\xe0\x00\x2e\xe0\x04\x6e\xf6\xf2\xef\xe8\xe8\xf8\x06\xff\x9a\x9a\x9a\x9e\x84\x84\x84\xdf\x7b\x7a\x7a\x2e\x88\x8b\x8b\xfb\x06\xfe\x3b\x77\xee\xd0\x58\xb0\x86\x63\xb1\x58\x8e\x18\x13\x6c\x36\x1b\x42\xd9\xe2\x4e\x44\x2e\x97\xd3\xeb\x4d\xc4\x05\xac\x03\x21\xb0\x05\x9b\xb0\x0d\x1f\xd6\x3a\xc0\x02\x4c\xc0\x06\x8c\xb3\xf0\x1f\xc9\xce\xce\x8e\xf1\xf6\xf6\x7e\xe2\x3e\xf8\x8f\xcc\xc6\x3f\x31\x31\xf1\x15\x60\x4a\x4a\x4a\x9a\x93\x03\x30\x4a\xa5\x52\x3a\x3e\xb7\xb6\xb6\xda\xc5\xdb\x5a\x30\x4e\x52\x53\x53\x29\xf8\x81\xad\xd9\x78\x13\x11\x0a\x85\x74\xfc\x41\x5f\xa9\xac\xac\xec\x41\x9e\x4d\x72\x08\xc4\x40\xc4\x4e\xa5\x52\xd9\x28\x14\x0a\xff\xcb\x16\xff\x95\x2b\x57\xfe\x5b\x56\x56\x16\xff\xc8\x91\x23\xa3\x84\x3f\xe6\x62\xe4\x27\x7b\xf6\xec\xe9\xe6\xf3\xf9\x34\x7f\xf8\x7c\x10\x5e\xdf\x87\x14\x17\x17\x63\xec\x81\xff\x6f\x0a\x0b\x0b\x3b\x8f\x1e\x3d\x6a\x44\xce\x40\xb0\x63\x8d\x55\x55\x55\x75\x23\x3d\x3d\x9d\x6b\x8b\xbf\x48\x24\x72\x55\xab\xd5\xa7\x8e\x1e\x3d\x3a\x4d\x72\x18\xcc\x65\x7f\xfd\xeb\x5f\xc7\xdf\x7a\xeb\xad\x77\xc3\xc3\xc3\x5f\x62\x32\x99\x8e\xb5\xb5\xb5\x3f\x38\x6f\xcb\xd8\xc3\x66\xb3\x1d\xde\x78\xe3\x8d\x27\x77\xee\xdc\xc9\xaf\xaf\xaf\xbf\x81\x35\x11\xd9\x4f\x46\x0e\x72\xe0\xc0\x81\x9b\x12\x89\x64\xa5\x1d\xfc\xb9\x65\x65\x65\x37\xb0\xf6\x40\x0e\x45\xf6\x16\x6a\x6b\x6b\xff\x21\x10\x08\xd2\x56\xad\x5a\xf5\x33\xe4\x7c\x3f\x34\x67\x6b\xf1\xf3\xf3\x43\xdc\x58\x24\x14\x0a\x3d\x1a\x1b\x1b\xaf\x10\xfe\x78\x86\x87\x87\x4d\x07\x0f\x1e\xbc\x99\x91\x91\x61\x93\xbf\x58\x2c\xf6\xd0\x6a\xb5\xe7\x8e\x1d\x3b\x36\xd3\xfe\x66\xfd\x29\x8d\x46\xd3\x21\x10\x08\x7e\x85\x98\x36\xdb\xb8\x9e\x9e\x9e\xb6\x4b\x66\xdb\xa3\xb6\x57\x77\x2e\xfe\x88\xb1\x1b\x36\x6c\x70\x96\x48\x24\x9b\xeb\xeb\xeb\xbf\xb2\x6e\xff\x96\x96\x16\xbb\xda\x3f\x2c\x2c\xec\xe9\xac\xac\x2c\xa1\xf5\xf8\xff\xf4\xd3\x4f\x4d\xe5\xe5\xe5\x3d\x98\xd3\x10\x6b\x10\xdb\xe0\xf7\xfa\xf5\xeb\x54\x5e\x5e\x1e\x9d\xd3\x20\x6e\x63\xad\x6d\x4b\x7c\x7d\x7d\xe9\x98\xf5\xc1\x07\x1f\x50\x58\x97\x62\x6d\x66\x8f\x2e\xca\xa0\x2c\x74\xc8\x7a\x1e\x82\xb1\x88\x36\x49\x48\x48\xf8\xb5\x5e\xaf\x3f\xf1\xfe\xfb\xef\x4f\x63\xcc\x82\x3b\xb0\x5f\xbe\x7c\x19\xfd\xf7\x7a\x5a\x5a\x9a\xcd\xf1\x6f\x8e\xff\xff\x63\x2b\xfe\x27\x26\x26\xd2\x67\x6f\xc8\x45\xfd\xfd\xfd\x17\x86\x86\x86\xfe\x28\x24\x24\xe4\x49\x7b\x64\xd5\xaa\x55\x3f\xe6\x72\xb9\xf4\x59\x26\xd6\xe6\xa1\xa1\xa1\xce\xf6\xea\xa2\x2c\x74\x50\x1f\xed\xed\xed\xf7\xc4\x7f\xb4\x4d\x45\x45\x45\x0f\x62\x35\x59\x3f\x21\xfe\x77\x74\x74\x4c\xe5\xe7\xe7\x1f\x4a\x4e\x4e\xfe\x93\x9d\xfc\x67\x9d\xff\x2b\x2b\x2b\xfb\xde\x7c\xf3\xcd\x57\xdd\xdc\xdc\x1e\xe1\x72\xb9\xf4\x98\xf3\xf7\xf7\x7f\x84\xcf\xe7\xbf\x2c\x97\xcb\xd3\x55\x2a\x95\x52\xab\xd5\xe6\xcf\x27\x6a\xb5\x3a\x5f\xa9\x54\xe6\x89\xc5\x62\xf7\xc0\xc0\xc0\x27\x85\x42\xe1\x9f\x14\x0a\x45\x16\x7e\xb7\x47\x17\x65\xa1\x13\x10\x10\xe0\x84\x35\x30\xf8\x0b\x04\x02\xb4\x03\x3d\xff\xcd\x35\xff\x67\x65\x65\x6d\xf5\xf7\xf7\x77\x7e\x50\xfe\xc8\x23\x2b\x2a\x2a\xbe\x8c\x8d\x8d\x15\x06\x04\x04\x3c\xc5\x64\x32\xe9\x3c\x27\x3e\x3e\xfe\x79\x85\x42\x51\x58\x5e\x5e\x7e\xfb\xd4\xa9\x53\x58\xcb\x4f\x93\x75\xfd\x6c\xd2\xd5\xd5\x35\x5d\x5f\x5f\x3f\x91\x9f\x9f\x7f\x78\xc7\x8e\x1d\x6b\x15\x0a\x45\x43\x75\x75\xf5\x28\xd6\xbd\xf3\xe9\x41\x50\x06\x65\x95\x4a\xe5\x5e\xa1\x50\x48\xc7\xa1\x0f\x3f\xfc\x90\x1e\x13\x1c\x0e\x67\x51\x7c\x7c\x3c\xa3\xb2\xb2\xb2\xdf\x9a\x3f\xb8\xdc\x4f\xfe\x97\x9b\x9b\xbb\xa1\xb5\xb5\xf5\xae\x65\x0c\x35\xef\x27\x4c\x15\x14\x14\xec\x8f\x8a\x8a\xfa\x25\xe6\x00\xe4\x65\x02\x81\xe0\x65\x83\xc1\xf0\x61\x77\x77\x37\x3d\x4f\x5a\xef\xeb\x58\x0b\x62\x2a\xe6\xe3\xea\xea\xea\xa1\xb4\xb4\xb4\xac\xb2\xb2\xb2\x41\x72\x8e\x62\x4b\x17\x65\x50\xb6\xbc\xbc\x7c\x20\x35\x35\x75\x19\xf2\x61\xac\x3d\x2d\xf6\x69\xf5\xb5\xb5\xb5\x77\xd0\x56\x24\xf6\x81\x03\xb8\x80\x93\x3d\xfc\xb1\x8e\xcd\xce\xce\x0e\x35\x18\x0c\x83\x3d\x3d\x3d\x46\xf8\x25\xe7\x6e\x18\x57\xc5\xc5\xc5\x67\x04\x02\x01\x03\xe3\x17\x63\x0e\x7d\x7f\xf7\xee\xdd\x1f\x5e\xb8\x70\x81\xe6\x46\xf6\x89\xe6\x12\xd8\xbb\x72\xe5\x8a\xa9\xae\xae\xee\x96\x58\x2c\xce\xae\xa8\xa8\x18\x44\x6c\x25\xfb\x83\xf3\x09\xca\xa0\x6c\x55\x55\xd5\x40\x4a\x4a\xca\x6b\xe0\x8f\xb8\x1b\x1c\x1c\x3c\xb3\x4f\x4b\xf6\xea\xc8\x1e\x08\x38\x80\x0b\x38\x81\x9b\x2d\xfe\x1e\x1e\x1e\x8e\x6f\xbc\xf1\x86\x8b\x4c\x26\x53\x9d\x3c\x79\x72\x92\xd8\x82\xff\x2f\xbe\xf8\xc2\xb4\x77\xef\xde\x51\x85\x42\xf1\x36\x8f\xc7\x7b\x06\x63\x8e\xcf\xe7\xbf\x98\x9f\x9f\xbf\x6f\xef\xde\xbd\xe3\xfd\xfd\xfd\xf4\x1e\x01\xf2\xcf\xb9\xe4\xe3\x8f\x3f\xa6\xcf\x88\xb4\x5a\x6d\x9f\x58\x2c\xde\x8a\x5c\x0b\x6b\x64\xac\x95\xe7\xd3\x83\x90\xf5\xb4\x46\xa3\x39\x9e\x92\x92\xf2\x9f\xe8\xff\x98\x4b\x22\x23\x23\x7f\x92\x9f\x9f\xaf\xb3\xde\xa7\x05\x76\x70\x00\x17\x70\x02\x37\x3b\xf8\x23\xae\x3d\x21\x93\xc9\x92\x0f\x1c\x38\x30\xf1\xe5\x97\x5f\xde\x63\x0f\xf5\xab\x56\xab\x4f\xa6\xa6\xa6\x7a\xad\x58\xb1\xc2\x69\xf5\xea\xd5\x4b\x92\x92\x92\xdc\xf3\xf3\xf3\x6b\x8a\x8b\x8b\xdf\x2f\x2b\x2b\x6b\x9b\x4f\x4a\x4a\x4a\xda\xb4\x5a\x6d\x4b\x66\x66\x66\x78\x78\x78\xf8\xf3\x62\xb1\x38\x48\xa3\xd1\xec\xc3\xef\xf6\xe8\xa2\x2c\xd6\xd3\xeb\xd6\xad\x7b\xdc\xcb\xcb\xcb\x01\xeb\xca\xb5\x6b\xd7\x2e\xd5\x6a\xb5\x7b\x2d\xdb\x1e\x98\x81\x1d\x1c\xc0\x85\xec\x1b\xd9\x7a\x54\x2a\x15\x62\xba\x53\x56\x56\x56\x88\x4e\xa7\x3b\xdf\xdd\xdd\x7d\xcf\xde\x32\xea\xb7\xa1\xa1\x01\x36\x95\x5c\x2e\xf7\xa7\xcb\x97\x2f\x77\x5c\xb3\x66\xcd\xe2\xe8\xe8\xe8\xe7\xcc\xe7\x36\xf3\x4a\x4c\x4c\x0c\xde\x2e\x51\x51\x51\x4f\xb8\xba\xba\x3a\x86\x87\x87\x3f\xba\x65\xcb\x96\xa5\xe6\xdf\xed\xd1\x5d\x0a\x1d\xf3\x59\x00\xe6\xcf\x1f\xa5\xa4\xa4\xac\xd2\xeb\xf5\xdd\x88\x2b\x64\xdd\x03\xcc\xc0\x0e\x0e\xe0\x02\x4e\xe0\x66\xeb\x19\x1f\x1f\xa7\xd7\xe0\xa1\xa1\xa1\x3f\x97\xc9\x64\xda\xe6\xe6\xe6\x29\xc4\x53\xcb\x3e\xd0\xd5\xd5\x65\x54\xa9\x54\x67\x52\x52\x52\x42\x02\x03\x03\xc1\xc3\x81\x9c\x6d\x7a\x78\x78\xcc\x2b\xe4\x6c\xcf\xdf\xdf\x1f\xfd\x96\x8e\xdd\xc8\xdd\xed\xd5\x45\x59\xb3\x0e\xf2\x28\xa7\xcc\xcc\x4c\xdf\xfc\xfc\xfc\x93\xfb\xf7\xef\x9f\x26\x7d\x15\x02\xcc\xc0\x0e\x0e\xe0\x02\x4e\xe0\x66\xeb\x41\x6e\xea\xe3\xe3\x43\x71\xb9\xdc\xc5\x12\x89\x24\x48\xab\xd5\x76\xf7\xf6\xf6\x9a\x2c\xfb\x00\xe2\x40\x73\x73\xf3\xb4\x5c\x2e\x3f\x2a\x14\x0a\xdd\x96\x2d\x5b\xb6\x08\xb9\xc0\x9e\x3d\x7b\xa8\xdd\xbb\x77\xcf\x2b\x65\x65\x65\xd4\xc9\x93\x27\xef\xc9\x5d\x7b\x7a\x7a\xa8\xf2\xf2\x72\x9b\xba\x28\x83\xb2\x88\xf9\xe8\x3b\x58\x8b\x64\x67\x67\xef\x6c\x6a\x6a\x9a\x40\x7c\x40\xce\x43\xf6\xcc\x81\x19\xd8\xc1\x01\x5c\xc8\xdd\x10\x5b\x0f\xf0\xb4\xb4\xb4\xd0\x67\x00\x61\x61\x61\xcf\x2a\x95\xca\xd2\xba\xba\xba\x09\xe4\x90\x64\x3d\x04\x3f\xf0\x57\x5f\x5f\x7f\x27\x3d\x3d\x7d\xfb\xea\xd5\xab\x9f\x66\x30\x18\x8e\x11\x11\x11\xdf\xfb\x3a\x07\x3e\xcc\x7b\xbe\x4f\x89\xc5\xe2\x48\xb5\x5a\x7d\xfe\xf4\xe9\xd3\x33\xfb\xed\xc0\x08\xac\xc0\x0c\xec\xe0\x00\x2e\xe0\x64\xb2\xf3\xfc\x6b\x64\x64\x84\xce\xed\x42\x43\x43\x9d\x76\xec\xd8\xe1\xa1\x50\x28\xda\x50\xc7\x96\x7b\xd2\xc8\x2b\xb1\x46\x52\xab\xd5\xfd\x22\x91\x28\x82\xc7\xe3\x3d\x05\x5c\xd0\x9b\x6b\x8f\xef\xdb\x08\x6c\xc2\x36\x7c\xc0\x17\x7c\xaa\x54\xaa\xfe\xd6\xd6\xd6\x99\x7e\x4f\xf6\x29\x81\x15\x98\x81\x1d\x1c\xa0\x47\xce\x80\xed\xe1\x0f\xd9\xbb\x77\x2f\x1d\x07\x82\x82\x82\x1e\x4b\x4c\x4c\x0c\x28\x2e\x2e\xbe\x84\xdc\x83\xd4\x33\x89\xaf\x98\xcb\x48\x1d\xac\x59\xb3\xe6\x69\x16\x8b\xb5\xc8\x1c\x97\xe6\xdd\xb3\xb9\x9f\xb5\xbd\x4e\xa7\xa3\xb1\xc0\x36\x7c\xc0\x17\x7c\xc2\x37\xc6\x39\x39\xf7\x02\x36\x60\x04\x56\x60\x06\x76\xe8\x81\x0b\xb1\x67\x2f\x7f\x93\xf9\xde\x0b\xe6\xcc\xb8\xb8\xb8\x17\x95\x4a\x65\x4d\x65\x65\xe5\xa8\xe5\xb9\x16\xfc\xc2\x3f\xa9\x83\xcc\xcc\xcc\x24\x89\x44\xe2\xc5\xe1\x70\x9e\x5a\xb6\x6c\x19\x7d\x67\xb5\xa3\xa3\x83\x8e\xa9\xf7\xcb\x1b\x3a\xc7\x8f\x1f\xa7\xf7\x13\x11\x5f\x83\x83\x83\x7f\x24\x91\x48\x3c\xe1\x63\x36\xee\xe4\xcc\x0f\x18\x81\x15\x98\x81\xdd\xfa\x1e\xcc\xfd\xf0\xbf\x76\xed\x1a\xbd\xa7\x1b\x1c\x1c\xec\xc4\xe7\xf3\x5f\x95\xc9\x64\x0d\xd6\x67\x7b\xf0\x8f\x7e\x80\xb1\xd0\xd0\xd0\x30\xaa\x52\xa9\x4e\x0b\x04\x82\x84\xa0\xa0\xa0\x3f\xb2\xd9\xec\xc7\xcc\xe7\xe1\xf4\xb8\xd5\xeb\xf5\x54\x5b\x5b\xdb\xac\xeb\x78\xfc\x86\x6f\x28\x83\xb2\xd0\x81\x6e\x50\x50\x90\x13\xe6\x59\xcc\x35\x05\x05\x05\x27\xe1\x03\xbe\xe0\x73\x96\xf3\xce\x31\xf3\x59\xf1\xab\xc0\x0c\xec\xe0\xf0\xa0\xfc\x21\x8d\x8d\x8d\xf4\xda\xdb\x7c\xa6\x7f\xcf\xd9\xae\xe5\xf9\x26\xe2\x01\xb9\xab\x59\x51\x51\xf1\x55\x66\x66\x66\xe3\xf6\xed\xdb\x7d\x79\x3c\xde\x73\x91\x91\x91\x4f\x05\x04\x04\x3c\x82\x39\x8c\xc5\x62\xd1\xf5\x11\x16\x16\x46\xef\x6d\x42\xf0\x37\x7e\xc3\x37\x94\x41\x59\xe8\x40\x37\x35\x35\x95\x85\x5c\x03\xf3\x2d\xe6\x38\x72\xc7\xd0\xf2\x0e\x14\xe1\x0e\x6c\xc0\x08\xac\xc0\x0c\xec\xd6\x7c\xee\x97\x3f\xa4\xb5\xb5\x15\xe3\x0f\x7d\x81\x9c\x6f\xd7\x59\xd7\x81\xc9\xe2\x8e\x22\x72\xf4\xc6\xc6\xc6\x49\x9d\x4e\x77\x52\xab\xd5\xd6\x2a\x14\x0a\x79\x6c\x6c\xec\x9f\xa3\xa3\xa3\x5f\x8c\x89\x89\x79\x61\xe3\xc6\x8d\x3f\x76\x77\x77\x5f\x48\xf6\xb7\xf1\x37\x7e\xc3\x37\x94\x41\x59\xe8\x40\x57\xaf\xd7\xa3\xcd\x27\x90\x73\x60\xde\xb5\x3c\x17\xb5\xe2\x5e\x07\x6c\xc0\x08\xac\x73\xed\x3b\x3f\x08\x7f\xc8\x27\x9f\x7c\x42\xd7\x81\xa7\xa7\xa7\xcd\x33\x7e\xac\x53\x06\x07\x07\xe9\x7c\xbd\xab\xab\x0b\xf8\x6e\x1b\x0c\x86\x53\xa5\xa5\xa5\x6d\x7a\xbd\xfe\x50\x56\x56\xd6\xb6\xb8\xb8\xb8\x3f\x24\x26\x26\xbe\x02\xc1\xdf\xf8\x0d\xdf\x50\x06\x65\xa1\x03\x5d\xd8\x80\x2d\xb2\xb6\x22\xeb\x3a\xcb\xbb\x01\xc0\x02\x4c\xc0\x06\x8c\xc0\x3a\x17\x8f\x07\xe5\x0f\x99\x98\x98\x98\xe9\x07\x73\xdd\xf1\x20\xf8\x80\x15\x6d\x85\xfe\x00\xfc\xe8\xb7\xe8\x17\x1d\x1d\x1d\xc6\xca\xca\xca\xc1\xaa\xaa\xaa\x73\x35\x35\x35\x3d\x10\xfc\x8d\xdf\xf0\x0d\x65\x50\x16\x3a\xd0\x85\x0d\x4b\xde\xf3\xdd\x0d\x01\x36\x60\x9c\x8f\xc3\xb7\xe1\x6f\xd9\x0f\x30\xc6\xe2\xe3\xe3\x5f\x95\xcb\xe5\x55\x45\x45\x45\x33\x77\x7c\x66\xbb\xab\x49\x72\x52\x70\x19\x1e\x1e\xa6\xe3\x25\x62\xb7\xa5\xe0\x37\x7c\x23\x7c\x2d\xef\xca\x58\xdf\x29\x9d\xed\x6e\x90\xad\x76\xff\xae\xf8\x93\x78\x80\xf8\xc2\xe5\x72\x9d\x62\x63\x63\x7f\x99\x94\x94\x44\xdf\xd5\x2c\x2c\x2c\x3c\xbf\x7f\xff\xfe\xa9\xbe\xbe\xbe\x7b\xee\xfc\x58\xdf\xf3\xb1\xf7\xee\xb7\xd5\x9d\x52\xfa\xee\x01\x7c\xc0\x97\xe5\xdd\x30\x60\xb1\xf7\x9c\xe9\xbb\xe0\x4f\xe6\x05\xcc\x2f\x96\x77\x35\xc5\x62\xf1\x4a\xa5\x52\x59\xa9\xd7\xeb\x2f\x98\xef\x6a\xd2\xf7\xd3\x30\x56\x11\xab\x48\x7e\x3e\xd7\x43\x72\x6b\x94\x85\x0e\x74\xc9\x9d\x52\xd8\x84\x6d\xf8\xb0\xbc\x53\x0a\x0c\xb3\xc5\xf9\xef\x9b\x3f\xc9\x0f\x04\x02\x01\xbd\x16\x73\x73\x73\x73\x7c\xfd\xf5\xd7\x97\xf0\x78\xbc\xa5\xe6\xbb\x9a\x85\x2a\x95\xaa\xaf\xb5\xb5\x75\xf4\xd4\xa9\x53\x93\xa7\x4e\x9d\x9a\xba\x78\xf1\xa2\xf1\xd6\xad\x5b\xf4\x3e\xd6\x6c\x82\x6f\x28\x83\xb2\xd0\x39\x74\xe8\xd0\x44\x61\x61\xe1\xcc\x9d\x52\xd8\x86\x0f\xf8\x82\x4f\xf8\xb6\x9e\xdf\xff\x95\xfc\x89\x0c\x0e\x0e\xd2\xf7\x10\x80\x89\xc9\x64\xd2\x77\x35\x43\x42\x42\x9e\x4b\x48\x48\x08\xc9\xcd\xcd\x4d\x94\xcb\xe5\xa9\x99\x99\x99\x45\x85\x85\x85\x1f\x1f\x3e\x7c\xf8\x6e\x47\x47\xc7\xac\x82\x6f\x28\x83\xb2\xd0\x91\xcb\xe5\xc2\x9c\x9c\x9c\x75\x3c\x1e\xef\x79\xd8\x84\x6d\xf8\x80\x2f\xcb\xbb\x07\x3f\x34\x7f\x22\xc3\xc3\xc3\xf4\xfa\x96\xc5\x62\x51\xcb\x97\x2f\x77\x64\x32\x99\x58\x77\x3e\xee\xe3\xe3\xe3\xec\xe7\xe7\xf7\xab\xad\x5b\xb7\xae\xcc\xcd\xcd\x8d\x92\x4a\xa5\x1b\x66\x13\x7c\x43\x19\x94\x85\x8e\xbf\xbf\xff\xe3\x1c\x0e\x67\xb1\xbb\xbb\xbb\x23\x6c\xc2\xb6\xe5\xdd\x87\xff\x6b\xfc\x89\x60\xcd\x32\x3a\x3a\x4a\x9f\x5f\x03\x37\x83\xc1\xa0\xef\xc7\x31\x99\x4c\x27\x16\x8b\xb5\x64\x3e\x41\x19\x94\x85\x0e\x74\x45\x22\x11\x6d\xcb\xd6\xff\xeb\xf8\xae\xf8\x3f\x7c\x1e\x3e\x0f\x9f\xff\x3f\xcf\x9c\xc9\xc8\xcc\x33\x46\x51\x2e\x78\x5f\xa6\x28\x27\xbc\xc5\x14\xe5\x60\x32\x87\x12\x24\x2d\x78\x8b\x4c\xa6\x29\xbc\x5d\x4c\xa6\x21\xbc\x9d\xe9\xe2\xb4\x42\x1b\xde\x0b\xe8\xf7\x8f\xf1\x16\xe3\xdf\x0e\x24\x12\x99\xcc\x3b\x92\x22\xf2\xa6\xcd\x2c\xa6\x18\x53\xd4\x0b\x14\xb5\x90\x62\x8c\x51\x4c\x8a\x5a\x44\xb9\xfc\xf3\xdd\x46\x51\x4e\x94\xcb\x90\x03\xde\x62\xe7\x21\x87\x36\xe7\xcb\xf4\xfb\xb2\xcb\x10\xde\x0b\x86\x5c\x86\x9c\xdb\x9c\x87\x16\x8c\x89\xa6\x5c\xf0\x06\xd6\xb9\xde\x97\xad\xde\xf8\x5d\x4c\x51\x0b\xf0\x06\xcc\x36\xe7\x21\xfa\xc4\xa4\xcd\x99\xa6\x45\x89\xbf\xf1\x1e\xfb\x1a\xb7\x8b\xc5\x7b\x81\x78\x11\xe5\x32\x45\x31\x50\x27\x8c\x29\xd4\xc9\x18\xc5\x30\xa2\x4e\x86\xc0\x93\xae\x0b\x91\x09\x95\x27\xa6\x45\x64\x44\x7d\xb4\x51\x4e\x97\xf1\x8d\xd4\x1b\xa9\xc7\x31\x73\xbd\xd2\x15\xc3\xf8\x67\x7d\x93\xfa\x47\xc5\xd2\xd8\x87\xe8\xe2\x74\x41\x06\xdd\x70\x6d\x0b\x6c\x37\xae\xe9\x7f\x03\x00\x00\xff\xff\x04\xa0\xd2\x6c\x3e\x42\x00\x00")

func dataIconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataIconIco,
		"data/icon.ico",
	)
}

func dataIconIco() (*asset, error) {
	bytes, err := dataIconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/icon.ico", size: 16958, mode: os.FileMode(420), modTime: time.Unix(1540588070, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x87, 0x29, 0x55, 0x59, 0x2c, 0xb4, 0x34, 0x7d, 0x2f, 0xb0, 0xeb, 0xfc, 0xfe, 0xf5, 0xbf, 0x6a, 0x62, 0x0, 0xf3, 0xa2, 0x53, 0x9b, 0xd8, 0x69, 0xe0, 0x3a, 0x1, 0x2e, 0xcf, 0x6, 0x80}}
	return a, nil
}

var _dataIconXcf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4d\x6b\x13\x5f\x14\xc6\xcf\x4c\xd2\x97\x24\xff\xfe\xab\xb6\xba\x72\x71\x7d\x79\x24\x81\x46\x1a\xb2\xea\x4a\xa8\x60\x11\x2c\x08\x5d\xb8\x71\x93\x4e\x26\x93\xc1\x64\x26\x64\x46\x4d\x8b\xb4\x8a\x54\x1a\x10\xc4\x4d\x41\x2a\x14\xf1\xa5\xb1\x49\x6d\xd2\x9a\xaf\xe0\xde\xcf\x51\xdc\x87\x92\x4e\xe4\x4e\x6f\xf4\xa6\x9d\x95\x0f\x0c\xf9\xcd\x73\xcf\xb9\x37\x73\x9e\x6b\x98\xc5\x12\xab\x68\x39\xf6\x64\x3a\x95\x22\x22\x3a\x27\x1e\xae\x0d\x22\x3a\x4f\x44\x8a\x42\x44\x13\x44\x34\x3a\x7b\x44\x34\xeb\xf9\x8b\x93\x44\x14\x26\x22\x95\x88\x2e\x09\xe6\x75\x17\x89\x94\x39\x22\x1a\xe3\x5b\x27\x35\xbb\x58\xd4\x2d\x97\xc4\xe2\x85\xdb\x65\x3d\xe3\xea\x59\xf6\xd4\x74\xf3\x6c\xee\xee\xfc\x7d\xff\x4c\xbf\xd4\x2c\x66\x0c\x3d\x69\x94\xcd\xac\xa8\x56\x28\xee\xb8\x4b\x05\x9d\x39\x76\xc1\xcc\x26\xa2\xf1\x9c\xa1\xd9\x05\xbb\xcc\xe2\xfe\x4f\xb2\x6c\x2c\x66\xd8\xf4\xcd\x69\x5f\x01\x90\x12\x90\x48\x44\xe3\x8b\x01\xad\xa9\xd3\x85\x67\x81\xb7\x56\x9c\x52\x46\x33\x2d\x83\xa5\xfa\x3b\x27\xa2\xf1\xa5\x20\x53\x78\xc9\xc7\x96\xe9\x32\xd3\xd2\xf2\xba\xc3\xfb\xed\x5c\xce\xd1\x5d\x26\x77\x9f\xb5\x4e\x9c\xc1\x56\x1a\x94\xf2\x63\xf0\x3d\xd4\x96\x5e\xfa\xb9\xf1\x29\xc7\x16\xb4\xb2\xae\x5b\x4e\xde\xf6\x07\xaf\x8a\x92\x61\x91\x52\x8f\x88\xae\x70\xbe\xf5\xdc\xf7\x47\xa5\xf4\x22\x82\xb9\xae\x4a\x7c\x59\xe2\xa8\xc4\x4c\xe2\x98\xc4\xff\x49\x3c\x26\xf1\xb8\x38\xaf\xaf\x11\xb1\xc6\xf7\x87\x54\x77\x9d\x73\xaf\xd7\xe3\xff\xf5\x9a\xc4\xf2\xad\x93\xa4\xfe\x0c\x18\x85\xd8\x4b\xfd\x15\xb0\xc6\xc7\x37\xd4\x37\x57\x95\xbf\xcf\x04\x3a\x33\x9b\xad\x9d\xaf\xcd\xf7\x33\xc3\x38\x7e\xd9\x5e\x0e\xe1\xb8\xd2\x5e\x0b\xc3\x5b\xaf\x8d\xc0\xfb\x58\x55\xe1\xdd\x69\x47\x70\x74\x70\x0f\xf8\x92\x8d\xe0\xf0\xe1\x36\x50\x07\xaa\xf5\xfa\x83\x52\xbd\xfe\x0c\xd8\x03\xda\x31\x74\xf7\x81\x56\x0c\xdd\x5d\xe0\x5b\x0c\x9d\x26\xb0\x97\x06\x36\x42\x38\x7c\x0b\x4c\x35\x81\xca\x27\xe0\xf5\xc1\xe7\xda\xf7\x17\xc0\x87\x65\x15\x5e\xed\x95\x0a\x65\x4a\x85\xb7\xb6\x13\x86\xd7\xd8\x1c\x82\xf7\x6e\x77\x18\x9d\xf5\xfd\xc6\xd6\x56\xa3\x55\x8d\xa0\x9b\x5e\x59\x49\x0f\x41\xfa\x8e\xf1\x05\xbd\xa0\x6b\xae\x69\x5b\x6c\x3e\xe3\x3c\x22\x69\x84\xfd\xb8\x57\xff\xc4\x4d\xff\x14\xb7\x1c\xf1\xff\x52\x2f\x3f\x3e\x74\x62\xdf\x10\x89\xcb\x9a\x94\x4a\x25\x85\x9d\x53\x97\x95\x7b\x6f\x82\x13\x0a\x6f\x4b\x09\xf5\x7e\x07\x00\x00\xff\xff\x8a\x40\x06\x5b\xab\x04\x00\x00")

func dataIconXcfBytes() ([]byte, error) {
	return bindataRead(
		_dataIconXcf,
		"data/icon.xcf",
	)
}

func dataIconXcf() (*asset, error) {
	bytes, err := dataIconXcfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/icon.xcf", size: 1195, mode: os.FileMode(420), modTime: time.Unix(1540587067, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xd7, 0x35, 0xc5, 0xa7, 0xa8, 0x49, 0x49, 0xf3, 0xdb, 0xcd, 0xf6, 0x79, 0x39, 0xf, 0xc3, 0xd2, 0x85, 0xf0, 0x6b, 0x5c, 0xd7, 0xe5, 0x74, 0xc9, 0x6a, 0x3, 0x55, 0x68, 0xe9, 0xca, 0xe0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/icon.ico": dataIconIco,

	"data/icon.xcf": dataIconXcf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"icon.ico": &bintree{dataIconIco, map[string]*bintree{}},
		"icon.xcf": &bintree{dataIconXcf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
